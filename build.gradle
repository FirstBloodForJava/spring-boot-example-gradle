plugins {
    id 'java'
    // 只定义这个插件的版本不使用插件
    id 'org.springframework.boot' version '2.2.7.RELEASE' apply false
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'


dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE'
        // spring boot依赖管理
        mavenBom 'org.springframework.boot:spring-boot-dependencies:2.2.7.RELEASE'
    }
}

// 是否打成jar包
jar {
    enabled = true
}

// 构建成可执行jar包，添加的后缀boot(org.springframework.boot插件启动才可配置)
/*bootJar {
    classifier = 'boot'
    // 可执行main的类全路径名称
    mainClassName = 'com.oycm.SpringBootExample'
}*/


repositories {
    /*repositories{
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
    }*/
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// 定义build命令在 clean之后运行
build.mustRunAfter clean

// 自定义这个task,名称buildJar，依赖build,和clean之后执行。前面定义了build在clean之后执行
tasks.register('buildJar', GradleBuild) {
    dependsOn build, clean

    doLast {
        String jarName = "$rootProject.name"
        delete(file("jar"))
        mkdir("jar")
        String jarPath = "build/libs"
        // 复制到一个目录下,并重命名
        copy {
            from(jarPath)
            into  "jar"
            rename {
                String fileName -> jarName + '.jar'
            }
        }
        // 删除build及里面的所有东西
        file("build").deleteDir();

    }
}

task buildJar1 (type: GradleBuild, dependsOn: [build, clean]) {

}